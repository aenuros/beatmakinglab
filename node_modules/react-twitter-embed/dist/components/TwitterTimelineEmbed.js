'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactProptypeConditionalRequire = require('react-proptype-conditional-require');

var _reactProptypeConditionalRequire2 = _interopRequireDefault(_reactProptypeConditionalRequire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var script = require('scriptjs');

script('https://platform.twitter.com/widgets.js', 'twitter-embed');

var TwitterTimelineEmbed = function (_Component) {
  (0, _inherits3.default)(TwitterTimelineEmbed, _Component);

  function TwitterTimelineEmbed() {
    (0, _classCallCheck3.default)(this, TwitterTimelineEmbed);
    return (0, _possibleConstructorReturn3.default)(this, (TwitterTimelineEmbed.__proto__ || (0, _getPrototypeOf2.default)(TwitterTimelineEmbed)).apply(this, arguments));
  }

  (0, _createClass3.default)(TwitterTimelineEmbed, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      script.ready('twitter-embed', function () {
        if (!window.twttr) {
          console.error('Failure to load window.twttr, aborting load.');
          return;
        }

        var options = (0, _assign2.default)({}, _this2.props.options);

        if (_this2.props.autoHeight) {
          options.height = _this2.refs.embedContainer.parentNode.offsetHeight;
        }

        window.twttr.widgets.createTimeline({
          sourceType: _this2.props.sourceType,
          screenName: _this2.props.screenName,
          userId: _this2.props.userId,
          ownerScreenName: _this2.props.ownerScreenName,
          slug: _this2.props.slug,
          id: _this2.props.id,
          url: _this2.props.url,
          widgetId: _this2.props.widgetId
        }, _this2.refs.embedContainer, options);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { ref: 'embedContainer' });
    }
  }]);
  return TwitterTimelineEmbed;
}(_react.Component);

TwitterTimelineEmbed.propTypes = {
  /**
   * This can be either of profile, likes, list, collection, URL, widget
   */
  sourceType: _propTypes2.default.oneOf(['profile', 'likes', 'list', 'collection', 'URL', 'widget']).isRequired,
  /**
   * username of twitter handle as String
   */
  screenName: (0, _reactProptypeConditionalRequire2.default)(_propTypes2.default.string, function (props) {
    return !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes');
  }),
  /**
   * UserId of twitter handle as number
   */
  userId: (0, _reactProptypeConditionalRequire2.default)(_propTypes2.default.number, function (props) {
    return !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes');
  }),
  /**
   * To show list, used along with slug
   */
  ownerScreenName: (0, _reactProptypeConditionalRequire2.default)(_propTypes2.default.string, function (props) {
    return props.sourceType === 'list' && !props.hasOwnProperty('id');
  }),
  /**
   * To show list, used along with ownerScreenName
   */
  slug: (0, _reactProptypeConditionalRequire2.default)(_propTypes2.default.string, function (props) {
    return props.sourceType === 'list' && !props.hasOwnProperty('id');
  }),
  /**
   * To show list, unique list id
   * Also used with collections, in that case its valid collection id
   */
  id: (0, _reactProptypeConditionalRequire2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), function (props) {
    return props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug') || props.sourceType === 'collection';
  }),
  /**
   * To show twitter content with url.
   * Supported content includes profiles, likes, lists, and collections.
   */
  url: (0, _reactProptypeConditionalRequire2.default)(_propTypes2.default.string, function (props) {
    return props.sourceType === 'url';
  }),
  /**
   * To show custom widget
   */
  widgetId: (0, _reactProptypeConditionalRequire2.default)(_propTypes2.default.string, function (props) {
    return props.sourceType === 'widget';
  }),
  /**
   * Additional options to pass to twitter widget plugin
   */
  options: _propTypes2.default.object,
  /**
   * Automatically fit into parent container height
   */
  autoHeight: _propTypes2.default.bool
};
exports.default = TwitterTimelineEmbed;